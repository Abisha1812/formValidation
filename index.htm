<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Multi-Step Registration Form</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    />
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      :root {
        --primary-color: #4f46e5;
        --secondary-color: #e0e7ff;
        --success-color: #10b981;
        --error-color: #ef4444;
        --text-primary: #1f2937;
        --text-secondary: #6b7280;
        --background: #f9fafb;
        --white: #ffffff;
        --border: #d1d5db;
        --border-focus: #4f46e5;
      }

      [data-theme="dark"] {
        --text-primary: #f9fafb;
        --text-secondary: #d1d5db;
        --background: #111827;
        --white: #1f2937;
        --border: #374151;
      }

      body {
        font-family: "Inter", -apple-system, BlinkMacSystemFont, sans-serif;
        background: var(--background);
        color: var(--text-primary);
        line-height: 1.6;
        transition: all 0.3s ease;
      }

      .container {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .form-container {
        background: var(--white);
        border-radius: 16px;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1),
          0 10px 10px -5px rgba(0, 0, 0, 0.04);
        overflow: hidden;
        width: 100%;
        position: relative;
      }

      .form-header {
        padding: 30px;
        text-align: center;
        background: linear-gradient(135deg, var(--primary-color), #7c3aed);
        color: white;
        position: relative;
      }

      .theme-toggle {
        position: absolute;
        top: 20px;
        right: 20px;
        background: rgba(255, 255, 255, 0.2);
        border: none;
        color: white;
        padding: 8px 12px;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
      }

      .theme-toggle:hover {
        background: rgba(255, 255, 255, 0.3);
      }

      .form-title {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 8px;
      }

      .form-subtitle {
        opacity: 0.9;
        font-size: 1rem;
      }

      .progress-bar {
        height: 4px;
        background: rgba(255, 255, 255, 0.3);
        margin-top: 20px;
        border-radius: 2px;
        overflow: hidden;
      }

      .progress-fill {
        height: 100%;
        background: white;
        width: 33.33%;
        transition: width 0.3s ease;
        border-radius: 2px;
      }

      .step-indicators {
        display: flex;
        justify-content: center;
        gap: 30px;
        margin-top: 20px;
      }

      .step-indicator {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 8px;
      }

      .step-circle {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.3);
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        transition: all 0.3s ease;
      }

      .step-circle.active {
        background: white;
        color: var(--primary-color);
      }

      .step-circle.completed {
        background: var(--success-color);
        color: white;
      }

      .step-label {
        font-size: 0.875rem;
        opacity: 0.8;
      }

      .form-content {
        padding: 40px;
      }

      .step {
        display: none;
      }

      .step.active {
        display: block;
        animation: slideIn 0.3s ease;
      }

      @keyframes slideIn {
        from {
          opacity: 0;
          transform: translateX(20px);
        }
        to {
          opacity: 1;
          transform: translateX(0);
        }
      }

      .step-title {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 24px;
        color: var(--text-primary);
      }

      .form-group {
        margin-bottom: 24px;
      }

      .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 16px;
      }

      label {
        display: block;
        margin-bottom: 8px;
        font-weight: 500;
        color: var(--text-primary);
      }

      .required {
        color: var(--error-color);
      }

      input[type="text"],
      input[type="email"],
      input[type="password"],
      input[type="tel"],
      input[type="date"] {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid var(--border);
        border-radius: 8px;
        font-size: 1rem;
        background: var(--white);
        color: var(--text-primary);
        transition: all 0.3s ease;
      }

      input:focus {
        outline: none;
        border-color: var(--border-focus);
        box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
      }

      input.error {
        border-color: var(--error-color);
        box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
      }

      input.success {
        border-color: var(--success-color);
        box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1);
      }

      .password-container {
        position: relative;
      }

      .password-toggle {
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: var(--text-secondary);
        cursor: pointer;
        padding: 4px;
      }

      .password-strength {
        margin-top: 8px;
      }

      .strength-bar {
        height: 4px;
        background: var(--border);
        border-radius: 2px;
        overflow: hidden;
        margin-bottom: 4px;
      }

      .strength-fill {
        height: 100%;
        transition: all 0.3s ease;
        border-radius: 2px;
      }

      .strength-text {
        font-size: 0.875rem;
        font-weight: 500;
      }

      .gender-options {
        display: flex;
        gap: 20px;
        margin-top: 8px;
      }

      .radio-option {
        display: flex;
        align-items: center;
        gap: 8px;
        cursor: pointer;
      }

      .radio-option input[type="radio"] {
        width: auto;
        margin: 0;
      }

      .checkbox-container {
        display: flex;
        align-items: flex-start;
        gap: 12px;
        margin-top: 8px;
      }

      .checkbox-container input[type="checkbox"] {
        width: auto;
        margin: 0;
        margin-top: 2px;
      }

      .error-message {
        color: var(--error-color);
        font-size: 0.875rem;
        margin-top: 4px;
        display: flex;
        align-items: center;
        gap: 4px;
      }

      .success-message {
        color: var(--success-color);
        font-size: 0.875rem;
        margin-top: 4px;
        display: flex;
        align-items: center;
        gap: 4px;
      }

      .form-actions {
        display: flex;
        justify-content: space-between;
        margin-top: 32px;
        gap: 16px;
      }

      .btn {
        padding: 12px 24px;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 8px;
      }

      .btn-primary {
        background: var(--primary-color);
        color: white;
        flex: 1;
      }

      .btn-primary:hover:not(:disabled) {
        background: #4338ca;
        transform: translateY(-1px);
      }

      .btn-primary:disabled {
        opacity: 0.6;
        cursor: not-allowed;
      }

      .btn-secondary {
        background: transparent;
        color: var(--text-secondary);
        border: 2px solid var(--border);
      }

      .btn-secondary:hover {
        background: var(--border);
      }

      .success-screen {
        text-align: center;
        padding: 40px;
      }

      .success-icon {
        width: 80px;
        height: 80px;
        background: var(--success-color);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 24px;
        color: white;
        font-size: 2rem;
      }

      .success-title {
        font-size: 1.8rem;
        font-weight: 700;
        margin-bottom: 16px;
        color: var(--text-primary);
      }

      .success-text {
        color: var(--text-secondary);
        font-size: 1.1rem;
      }

      .landing-page {
        max-width: none;
        padding: 0;
      }

      .landing-header {
        text-align: center;
        margin-bottom: 40px;
        padding-bottom: 30px;
        border-bottom: 2px solid var(--border);
      }

      .landing-title {
        font-size: 2.2rem;
        font-weight: 700;
        color: var(--text-primary);
        margin-bottom: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 12px;
      }

      .landing-title i {
        color: var(--primary-color);
      }

      .landing-subtitle {
        font-size: 1.1rem;
        color: var(--text-secondary);
        margin-bottom: 24px;
      }

      .tech-stack {
        display: flex;
        justify-content: center;
        gap: 12px;
        flex-wrap: wrap;
      }

      .tech-badge {
        background: var(--primary-color);
        color: white;
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 0.875rem;
        font-weight: 500;
      }

      .landing-content {
        max-height: 500px;
        overflow-y: auto;
        padding-right: 10px;
      }

      .landing-content::-webkit-scrollbar {
        width: 6px;
      }

      .landing-content::-webkit-scrollbar-track {
        background: var(--border);
        border-radius: 3px;
      }

      .landing-content::-webkit-scrollbar-thumb {
        background: var(--primary-color);
        border-radius: 3px;
      }

      .content-section {
        margin-bottom: 32px;
        padding: 24px;
        background: var(--background);
        border-radius: 12px;
        border: 1px solid var(--border);
      }

      .content-section h2 {
        font-size: 1.4rem;
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 16px;
        display: flex;
        align-items: center;
        gap: 8px;
      }

      .section-icon {
        display: inline-block;
        width: 32px;
        height: 32px;
        background: var(--primary-color);
        color: white;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 16px;
      }

      .section-content {
        color: var(--text-secondary);
        line-height: 1.7;
      }

      .section-content p {
        margin-bottom: 16px;
      }

      .section-content ul {
        list-style: none;
        padding: 0;
        margin: 16px 0;
      }

      .section-content li {
        padding: 8px 0;
        padding-left: 24px;
        position: relative;
      }

      .section-content li::before {
        content: "";
        position: absolute;
        left: 0;
        top: 14px;
        width: 6px;
        height: 6px;
        background: var(--primary-color);
        border-radius: 50%;
      }

      .section-content strong {
        color: var(--text-primary);
      }

      .landing-footer {
        display: flex;
        justify-content: space-between;
        gap: 16px;
        margin-top: 32px;
        padding-top: 24px;
        border-top: 2px solid var(--border);
      }

      @media (max-width: 768px) {
        .container {
          padding: 10px;
        }

        .form-header {
          padding: 20px;
        }

        .form-title {
          font-size: 1.5rem;
        }

        .step-indicators {
          gap: 15px;
        }

        .step-circle {
          width: 32px;
          height: 32px;
          font-size: 0.875rem;
        }

        .step-label {
          font-size: 0.75rem;
        }

        .form-content {
          padding: 24px;
        }

        .form-row {
          grid-template-columns: 1fr;
          gap: 16px;
        }

        .gender-options {
          flex-direction: column;
          gap: 12px;
        }

        .landing-footer {
          flex-direction: column;
        }

        .tech-stack {
          justify-content: center;
        }

        .landing-title {
          font-size: 1.8rem;
          flex-direction: column;
          gap: 8px;
        }

        .content-section {
          padding: 16px;
        }

        .landing-content {
          max-height: 400px;
        }
      }

      @media (max-width: 480px) {
        .step-indicators {
          gap: 10px;
        }

        .step-label {
          display: none;
        }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="form-container">
        <div class="form-header">
          <button class="theme-toggle" onclick="toggleTheme()">
            <i class="fas fa-moon"></i>
          </button>
          <h1 class="form-title">Create Account</h1>
          <p class="form-subtitle">Join us today and get started</p>
          <div class="progress-bar">
            <div class="progress-fill" id="progressFill"></div>
          </div>
          <div class="step-indicators">
            <div class="step-indicator">
              <div class="step-circle active" id="step1Circle">1</div>
              <span class="step-label">Personal</span>
            </div>
            <div class="step-indicator">
              <div class="step-circle" id="step2Circle">2</div>
              <span class="step-label">Security</span>
            </div>
            <div class="step-indicator">
              <div class="step-circle" id="step3Circle">3</div>
              <span class="step-label">Details</span>
            </div>
          </div>
        </div>

        <div class="form-content">
          <form id="registrationForm">
            <!-- Step 1: Personal Information -->
            <div class="step active" id="step1">
              <h2 class="step-title">Personal Information</h2>

              <div class="form-group">
                <label for="fullName"
                  >Full Name <span class="required">*</span></label
                >
                <input type="text" id="fullName" name="fullName" required />
                <div
                  class="error-message"
                  id="fullNameError"
                  style="display: none"
                ></div>
              </div>

              <div class="form-group">
                <label for="email"
                  >Email Address <span class="required">*</span></label
                >
                <input type="email" id="email" name="email" required />
                <div
                  class="error-message"
                  id="emailError"
                  style="display: none"
                ></div>
              </div>

              <div class="form-group">
                <label for="phone"
                  >Phone Number <span class="required">*</span></label
                >
                <input type="tel" id="phone" name="phone" required />
                <div
                  class="error-message"
                  id="phoneError"
                  style="display: none"
                ></div>
              </div>
            </div>

            <!-- Step 2: Security -->
            <div class="step" id="step2">
              <h2 class="step-title">Security Settings</h2>

              <div class="form-group">
                <label for="password"
                  >Password <span class="required">*</span></label
                >
                <div class="password-container">
                  <input
                    type="password"
                    id="password"
                    name="password"
                    required
                  />
                  <button
                    type="button"
                    class="password-toggle"
                    onclick="togglePassword('password')"
                  >
                    <i class="fas fa-eye" id="passwordToggleIcon"></i>
                  </button>
                </div>
                <div class="password-strength">
                  <div class="strength-bar">
                    <div class="strength-fill" id="strengthFill"></div>
                  </div>
                  <div class="strength-text" id="strengthText">
                    Enter a password
                  </div>
                </div>
                <div
                  class="error-message"
                  id="passwordError"
                  style="display: none"
                ></div>
              </div>

              <div class="form-group">
                <label for="confirmPassword"
                  >Confirm Password <span class="required">*</span></label
                >
                <div class="password-container">
                  <input
                    type="password"
                    id="confirmPassword"
                    name="confirmPassword"
                    required
                  />
                  <button
                    type="button"
                    class="password-toggle"
                    onclick="togglePassword('confirmPassword')"
                  >
                    <i class="fas fa-eye" id="confirmPasswordToggleIcon"></i>
                  </button>
                </div>
                <div
                  class="error-message"
                  id="confirmPasswordError"
                  style="display: none"
                ></div>
              </div>
            </div>

            <!-- Step 3: Additional Details -->
            <div class="step" id="step3">
              <h2 class="step-title">Additional Details</h2>

              <div class="form-row">
                <div class="form-group">
                  <label for="dateOfBirth"
                    >Date of Birth <span class="required">*</span></label
                  >
                  <input
                    type="date"
                    id="dateOfBirth"
                    name="dateOfBirth"
                    required
                  />
                  <div
                    class="error-message"
                    id="dateOfBirthError"
                    style="display: none"
                  ></div>
                </div>
              </div>

              <div class="form-group">
                <label>Gender <span class="required">*</span></label>
                <div class="gender-options">
                  <div class="radio-option">
                    <input type="radio" id="male" name="gender" value="male" />
                    <label for="male">Male</label>
                  </div>
                  <div class="radio-option">
                    <input
                      type="radio"
                      id="female"
                      name="gender"
                      value="female"
                    />
                    <label for="female">Female</label>
                  </div>
                  <div class="radio-option">
                    <input
                      type="radio"
                      id="other"
                      name="gender"
                      value="other"
                    />
                    <label for="other">Other</label>
                  </div>
                </div>
                <div
                  class="error-message"
                  id="genderError"
                  style="display: none"
                ></div>
              </div>

              <div class="form-group">
                <div class="checkbox-container">
                  <input type="checkbox" id="terms" name="terms" required />
                  <label for="terms"
                    >I agree to the
                    <a href="#" style="color: var(--primary-color)"
                      >Terms & Conditions</a
                    >
                    and
                    <a href="#" style="color: var(--primary-color)"
                      >Privacy Policy</a
                    >
                    <span class="required">*</span></label
                  >
                </div>
                <div
                  class="error-message"
                  id="termsError"
                  style="display: none"
                ></div>
              </div>
            </div>

            <!-- Success Screen -->
            <div class="step" id="successScreen" style="display: none">
              <div class="success-screen">
                <div class="success-icon">
                  <i class="fas fa-check"></i>
                </div>
                <h2 class="success-title">Registration Successful!</h2>
                <p class="success-text">
                  Welcome aboard! Your account has been created successfully.
                </p>
                <button
                  class="btn btn-primary"
                  onclick="showLandingPage()"
                  style="margin-top: 20px"
                >
                  <i class="fas fa-arrow-right"></i>
                  Continue to Project
                </button>
              </div>
            </div>

            <!-- Project Landing Page -->
            <div class="step" id="landingPage" style="display: none">
              <div class="landing-page">
                <div class="landing-header">
                  <h1 class="landing-title">
                    <i class="fas fa-rocket"></i>
                    Multi-Step Registration Form
                  </h1>
                  <p class="landing-subtitle">
                    A modern, responsive registration form with advanced
                    validation
                  </p>
                  <div class="tech-stack">
                    <span class="tech-badge">HTML5</span>
                    <span class="tech-badge">CSS3</span>
                    <span class="tech-badge">JavaScript</span>
                    <span class="tech-badge">Responsive</span>
                    <span class="tech-badge">Accessible</span>
                  </div>
                </div>

                <div class="landing-content">
                  <div class="content-section">
                    <div class="section-icon">
                      <i class="fas fa-file-alt"></i>
                    </div>
                    <h2>📋 README Description</h2>
                    <div class="section-content">
                      <p>
                        <strong>Project Overview:</strong> A comprehensive
                        multi-step registration form built with vanilla HTML,
                        CSS, and JavaScript. Features include real-time
                        validation, password strength checker, responsive
                        design, and accessibility compliance.
                      </p>

                      <p><strong>Key Features:</strong></p>
                      <ul>
                        <li>✅ Multi-step form with progress tracking</li>
                        <li>
                          ✅ Real-time field validation with visual feedback
                        </li>
                        <li>
                          ✅ Password strength meter and toggle visibility
                        </li>
                        <li>✅ Responsive design (mobile, tablet, desktop)</li>
                        <li>✅ Dark/light theme toggle</li>
                        <li>
                          ✅ Accessibility features (ARIA labels, keyboard
                          navigation)
                        </li>
                        <li>✅ Form persistence and error handling</li>
                        <li>✅ Modern UI with smooth animations</li>
                      </ul>

                      <p>
                        <strong>Validation Rules:</strong> Full name (letters
                        only, 3+ chars), valid email format, 10-digit phone
                        number, strong password (6+ chars with number and
                        special character), age verification (18+), and terms
                        acceptance.
                      </p>
                    </div>
                  </div>

                  <div class="content-section">
                    <div class="section-icon">
                      <i class="fas fa-users"></i>
                    </div>
                    <h2>🎤 Interview Description</h2>
                    <div class="section-content">
                      <p>
                        <strong>Technical Implementation:</strong> This project
                        demonstrates proficiency in frontend development
                        fundamentals without relying on external frameworks. I
                        implemented a state management system using vanilla
                        JavaScript to handle multi-step navigation and form
                        validation.
                      </p>

                      <p><strong>Problem-Solving Approach:</strong></p>
                      <ul>
                        <li>
                          🔍 <strong>User Experience:</strong> Designed
                          intuitive step-by-step flow with clear progress
                          indicators and immediate feedback
                        </li>
                        <li>
                          🛡️ <strong>Data Validation:</strong> Implemented
                          comprehensive client-side validation with real-time
                          feedback and error prevention
                        </li>
                        <li>
                          📱 <strong>Responsive Design:</strong> Used CSS Grid,
                          Flexbox, and media queries to ensure optimal
                          experience across all devices
                        </li>
                        <li>
                          ♿ <strong>Accessibility:</strong> Added ARIA
                          attributes, proper labeling, and keyboard navigation
                          support
                        </li>
                        <li>
                          🎨 <strong>Visual Design:</strong> Created a modern
                          interface with smooth animations, consistent spacing,
                          and professional color scheme
                        </li>
                      </ul>

                      <p>
                        <strong>Challenges Overcome:</strong> Managed form state
                        across multiple steps, implemented robust validation
                        logic, ensured cross-browser compatibility, and
                        optimized performance for smooth animations.
                      </p>

                      <p>
                        <strong>Best Practices Applied:</strong> Semantic HTML
                        structure, modular CSS architecture, clean JavaScript
                        code organization, progressive enhancement, and
                        mobile-first responsive design.
                      </p>
                    </div>
                  </div>

                  <div class="content-section">
                    <div class="section-icon">
                      <i class="fas fa-briefcase"></i>
                    </div>
                    <h2>📄 Resume Description</h2>
                    <div class="section-content">
                      <p>
                        <strong
                          >Multi-Step Registration Form | Frontend Development
                          Project</strong
                        >
                      </p>

                      <p>
                        Developed a comprehensive user registration system
                        featuring a modern multi-step interface with advanced
                        form validation and responsive design. Built entirely
                        with vanilla HTML5, CSS3, and JavaScript to demonstrate
                        core frontend development skills.
                      </p>

                      <p><strong>Key Achievements:</strong></p>
                      <ul>
                        <li>
                          ⚡ <strong>Enhanced User Experience:</strong> Designed
                          intuitive 3-step registration flow with real-time
                          validation, reducing form abandonment and improving
                          completion rates
                        </li>
                        <li>
                          🔒
                          <strong>Robust Validation System:</strong> Implemented
                          comprehensive client-side validation including email
                          format checking, password strength analysis, and age
                          verification
                        </li>
                        <li>
                          📱 <strong>Responsive Architecture:</strong> Developed
                          mobile-first responsive design ensuring optimal user
                          experience across desktop, tablet, and mobile devices
                        </li>
                        <li>
                          ♿
                          <strong>Accessibility Compliance:</strong> Integrated
                          ARIA attributes, semantic HTML structure, and keyboard
                          navigation support meeting WCAG guidelines
                        </li>
                        <li>
                          🎨 <strong>Modern UI/UX Design:</strong> Created
                          visually appealing interface with smooth CSS
                          animations, progress tracking, and dark/light theme
                          toggle
                        </li>
                      </ul>

                      <p>
                        <strong>Technical Skills Demonstrated:</strong> DOM
                        manipulation, event handling, form validation,
                        responsive web design, CSS animations, accessibility
                        implementation, cross-browser compatibility, and
                        performance optimization.
                      </p>

                      <p>
                        <strong>Technologies:</strong> HTML5, CSS3 (Flexbox,
                        Grid, Animations), Vanilla JavaScript (ES6+), Font
                        Awesome Icons, Mobile-First Design
                      </p>
                    </div>
                  </div>

                  <div class="landing-footer">
                    <button
                      class="btn btn-secondary"
                      onclick="showSuccessScreen()"
                    >
                      <i class="fas fa-arrow-left"></i>
                      Back to Success
                    </button>
                    <button
                      class="btn btn-primary"
                      onclick="window.location.reload()"
                    >
                      <i class="fas fa-refresh"></i>
                      Try Form Again
                    </button>
                  </div>
                </div>
              </div>
            </div>

            <div class="form-actions">
              <button
                type="button"
                class="btn btn-secondary"
                id="prevBtn"
                onclick="previousStep()"
                style="display: none"
              >
                <i class="fas fa-arrow-left"></i>
                Previous
              </button>
              <button
                type="button"
                class="btn btn-primary"
                id="nextBtn"
                onclick="nextStep()"
              >
                Next
                <i class="fas fa-arrow-right"></i>
              </button>
              <button
                type="button"
                class="btn btn-primary"
                id="submitBtn"
                onclick="handleFormSubmit()"
                style="display: none"
              >
                <i class="fas fa-check"></i>
                Create Account
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <script>
      let currentStep = 1;
      const totalSteps = 3;

      // Theme toggle functionality
      function toggleTheme() {
        const body = document.body;
        const themeIcon = document.querySelector(".theme-toggle i");

        if (body.getAttribute("data-theme") === "dark") {
          body.removeAttribute("data-theme");
          themeIcon.className = "fas fa-moon";
        } else {
          body.setAttribute("data-theme", "dark");
          themeIcon.className = "fas fa-sun";
        }
      }

      // Password toggle functionality
      function togglePassword(fieldId) {
        const field = document.getElementById(fieldId);
        const icon = document.getElementById(fieldId + "ToggleIcon");

        if (field.type === "password") {
          field.type = "text";
          icon.className = "fas fa-eye-slash";
        } else {
          field.type = "password";
          icon.className = "fas fa-eye";
        }
      }

      // Password strength checker
      function checkPasswordStrength(password) {
        const strengthFill = document.getElementById("strengthFill");
        const strengthText = document.getElementById("strengthText");

        let strength = 0;
        let text = "Weak";
        let color = "#ef4444";

        if (password.length >= 6) strength += 1;
        if (password.match(/[a-z]/) && password.match(/[A-Z]/)) strength += 1;
        if (password.match(/\d/)) strength += 1;
        if (password.match(/[^a-zA-Z\d]/)) strength += 1;

        switch (strength) {
          case 0:
          case 1:
            text = "Weak";
            color = "#ef4444";
            break;
          case 2:
            text = "Fair";
            color = "#f59e0b";
            break;
          case 3:
            text = "Good";
            color = "#10b981";
            break;
          case 4:
            text = "Strong";
            color = "#059669";
            break;
        }

        strengthFill.style.width = strength * 25 + "%";
        strengthFill.style.background = color;
        strengthText.textContent = text;
        strengthText.style.color = color;
      }

      // Validation functions
      function validateFullName(name) {
        if (!name) return "Full name is required";
        if (name.length < 3) return "Full name must be at least 3 characters";
        if (!/^[a-zA-Z\s]+$/.test(name))
          return "Full name can only contain letters and spaces";
        return "";
      }

      function validateEmail(email) {
        if (!email) return "Email is required";
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email))
          return "Please enter a valid email address";
        return "";
      }

      function validatePhone(phone) {
        if (!phone) return "Phone number is required";
        const phoneRegex = /^\d{10}$/;
        if (!phoneRegex.test(phone.replace(/\D/g, "")))
          return "Phone number must be exactly 10 digits";
        return "";
      }

      function validatePassword(password) {
        if (!password) return "Password is required";
        if (password.length < 6)
          return "Password must be at least 6 characters";
        if (!/\d/.test(password))
          return "Password must contain at least one number";
        if (!/[^a-zA-Z\d]/.test(password))
          return "Password must contain at least one special character";
        return "";
      }

      function validateConfirmPassword(password, confirmPassword) {
        if (!confirmPassword) return "Please confirm your password";
        if (password !== confirmPassword) return "Passwords do not match";
        return "";
      }

      function validateDateOfBirth(date) {
        if (!date) return "Date of birth is required";
        const birthDate = new Date(date);
        const today = new Date();
        let age = today.getFullYear() - birthDate.getFullYear();
        const monthDiff = today.getMonth() - birthDate.getMonth();

        if (
          monthDiff < 0 ||
          (monthDiff === 0 && today.getDate() < birthDate.getDate())
        ) {
          age--;
        }

        if (age < 18) return "You must be at least 18 years old";
        return "";
      }

      function validateGender() {
        const genderInputs = document.querySelectorAll('input[name="gender"]');
        const isSelected = Array.from(genderInputs).some(
          (input) => input.checked
        );
        return isSelected ? "" : "Please select your gender";
      }

      function validateTerms() {
        const termsCheckbox = document.getElementById("terms");
        return termsCheckbox.checked
          ? ""
          : "You must agree to the terms and conditions";
      }

      // Show error message
      function showError(fieldId, message) {
        const field = document.getElementById(fieldId);
        const errorElement = document.getElementById(fieldId + "Error");

        field.classList.add("error");
        field.classList.remove("success");
        errorElement.innerHTML = `<i class="fas fa-exclamation-circle"></i> ${message}`;
        errorElement.style.display = "flex";
      }

      // Show success
      function showSuccess(fieldId) {
        const field = document.getElementById(fieldId);
        const errorElement = document.getElementById(fieldId + "Error");

        field.classList.add("success");
        field.classList.remove("error");
        errorElement.style.display = "none";
      }

      // Clear validation
      function clearValidation(fieldId) {
        const field = document.getElementById(fieldId);
        const errorElement = document.getElementById(fieldId + "Error");

        field.classList.remove("error", "success");
        errorElement.style.display = "none";
      }

      // Validate step
      function validateStep(step) {
        let isValid = true;

        switch (step) {
          case 1:
            const fullName = document.getElementById("fullName").value.trim();
            const email = document.getElementById("email").value.trim();
            const phone = document.getElementById("phone").value.trim();

            const fullNameError = validateFullName(fullName);
            const emailError = validateEmail(email);
            const phoneError = validatePhone(phone);

            if (fullNameError) {
              showError("fullName", fullNameError);
              isValid = false;
            } else {
              showSuccess("fullName");
            }

            if (emailError) {
              showError("email", emailError);
              isValid = false;
            } else {
              showSuccess("email");
            }

            if (phoneError) {
              showError("phone", phoneError);
              isValid = false;
            } else {
              showSuccess("phone");
            }
            break;

          case 2:
            const password = document.getElementById("password").value;
            const confirmPassword =
              document.getElementById("confirmPassword").value;

            const passwordError = validatePassword(password);
            const confirmPasswordError = validateConfirmPassword(
              password,
              confirmPassword
            );

            if (passwordError) {
              showError("password", passwordError);
              isValid = false;
            } else {
              showSuccess("password");
            }

            if (confirmPasswordError) {
              showError("confirmPassword", confirmPasswordError);
              isValid = false;
            } else {
              showSuccess("confirmPassword");
            }
            break;

          case 3:
            const dateOfBirth = document.getElementById("dateOfBirth").value;
            const genderError = validateGender();
            const termsError = validateTerms();
            const dateError = validateDateOfBirth(dateOfBirth);

            if (dateError) {
              showError("dateOfBirth", dateError);
              isValid = false;
            } else {
              showSuccess("dateOfBirth");
            }

            if (genderError) {
              const genderErrorElement = document.getElementById("genderError");
              genderErrorElement.innerHTML = `<i class="fas fa-exclamation-circle"></i> ${genderError}`;
              genderErrorElement.style.display = "flex";
              isValid = false;
            } else {
              document.getElementById("genderError").style.display = "none";
            }

            if (termsError) {
              showError("terms", termsError);
              isValid = false;
            } else {
              document.getElementById("termsError").style.display = "none";
            }
            break;
        }

        return isValid;
      }

      // Update progress bar and step indicators
      function updateProgress() {
        const progressFill = document.getElementById("progressFill");
        const percentage = (currentStep / totalSteps) * 100;
        progressFill.style.width = percentage + "%";

        // Update step indicators
        for (let i = 1; i <= totalSteps; i++) {
          const circle = document.getElementById(`step${i}Circle`);
          if (i < currentStep) {
            circle.classList.add("completed");
            circle.classList.remove("active");
            circle.innerHTML = '<i class="fas fa-check"></i>';
          } else if (i === currentStep) {
            circle.classList.add("active");
            circle.classList.remove("completed");
            circle.textContent = i;
          } else {
            circle.classList.remove("active", "completed");
            circle.textContent = i;
          }
        }
      }

      // Show step
      function showStep(step) {
        // Hide all steps
        document.querySelectorAll(".step").forEach((stepElement) => {
          stepElement.classList.remove("active");
        });

        // Show current step
        document.getElementById(`step${step}`).classList.add("active");

        // Update buttons
        const prevBtn = document.getElementById("prevBtn");
        const nextBtn = document.getElementById("nextBtn");
        const submitBtn = document.getElementById("submitBtn");

        prevBtn.style.display = step > 1 ? "flex" : "none";
        nextBtn.style.display = step < totalSteps ? "flex" : "none";
        submitBtn.style.display = step === totalSteps ? "flex" : "none";

        updateProgress();
      }

      // Next step
      function nextStep() {
        if (validateStep(currentStep)) {
          if (currentStep < totalSteps) {
            currentStep++;
            showStep(currentStep);
          }
        } else {
          // Focus on first invalid field
          setTimeout(() => {
            const firstErrorField = document.querySelector(".error");
            if (firstErrorField) {
              firstErrorField.focus();
            }
          }, 100);
        }
      }

      // Previous step
      function previousStep() {
        if (currentStep > 1) {
          currentStep--;
          showStep(currentStep);
        }
      }

      // Handle form submission via button click (not form submit event)
      function handleFormSubmit() {
        console.log("handleFormSubmit called");

        // Validate step 3 (current step)
        const isStep3Valid = validateStep(3);
        console.log("Step 3 validation result:", isStep3Valid);

        if (isStep3Valid) {
          console.log("All validations passed, showing success screen");

          // Hide all steps first
          const allSteps = document.querySelectorAll(".step");
          allSteps.forEach((step) => {
            step.classList.remove("active");
            step.style.display = "none";
          });

          // Show success screen
          const successScreen = document.getElementById("successScreen");
          successScreen.style.display = "block";
          successScreen.classList.add("active");

          // Hide form actions
          document.querySelector(".form-actions").style.display = "none";

          // Update progress to 100%
          document.getElementById("progressFill").style.width = "100%";

          // Update all step indicators to completed
          for (let i = 1; i <= totalSteps; i++) {
            const circle = document.getElementById(`step${i}Circle`);
            circle.classList.add("completed");
            circle.classList.remove("active");
            circle.innerHTML = '<i class="fas fa-check"></i>';
          }

          console.log("Success screen should now be visible");

          // Collect form data for demonstration
          const formData = {
            fullName: document.getElementById("fullName").value,
            email: document.getElementById("email").value,
            phone: document.getElementById("phone").value,
            dateOfBirth: document.getElementById("dateOfBirth").value,
            gender: document.querySelector('input[name="gender"]:checked')
              ?.value,
            terms: document.getElementById("terms").checked,
          };
          console.log("Form data:", formData);
        } else {
          console.log("Validation failed, staying on current step");
          // Focus on first invalid field
          setTimeout(() => {
            const firstErrorField = document.querySelector(".error");
            if (firstErrorField) {
              firstErrorField.focus();
            }
          }, 100);
        }
      }

      // Remove the old form submission event listener and replace with simpler approach
      // Form submission - prevent default behavior
      document
        .getElementById("registrationForm")
        .addEventListener("submit", function (e) {
          e.preventDefault();
          console.log("Form submit prevented - using button click instead");
          return false;
        });

      // Show landing page function
      function showLandingPage() {
        console.log("showLandingPage function called");

        // Hide all steps
        const allSteps = document.querySelectorAll(".step");
        allSteps.forEach((step) => {
          step.classList.remove("active");
          step.style.display = "none";
        });

        // Show landing page
        const landingPage = document.getElementById("landingPage");
        landingPage.style.display = "block";
        landingPage.classList.add("active");

        // Hide form actions
        document.querySelector(".form-actions").style.display = "none";

        console.log("Landing page should now be visible");
      }

      // Show success screen function
      function showSuccessScreen() {
        console.log("showSuccessScreen function called");

        // Hide all steps
        const allSteps = document.querySelectorAll(".step");
        allSteps.forEach((step) => {
          step.classList.remove("active");
          step.style.display = "none";
        });

        // Show success screen
        const successScreen = document.getElementById("successScreen");
        successScreen.style.display = "block";
        successScreen.classList.add("active");

        // Hide form actions
        document.querySelector(".form-actions").style.display = "none";

        console.log("Success screen should now be visible");
      }

      // Real-time validation
      document
        .getElementById("fullName")
        .addEventListener("input", function () {
          const error = validateFullName(this.value.trim());
          if (this.value.trim() && error) {
            showError("fullName", error);
          } else if (this.value.trim() && !error) {
            showSuccess("fullName");
          } else {
            clearValidation("fullName");
          }
        });

      document.getElementById("email").addEventListener("input", function () {
        const error = validateEmail(this.value.trim());
        if (this.value.trim() && error) {
          showError("email", error);
        } else if (this.value.trim() && !error) {
          showSuccess("email");
        } else {
          clearValidation("email");
        }
      });

      document.getElementById("phone").addEventListener("input", function () {
        // Auto-format phone number
        let value = this.value.replace(/\D/g, "");
        if (value.length <= 10) {
          this.value = value;
        }

        const error = validatePhone(this.value);
        if (this.value && error) {
          showError("phone", error);
        } else if (this.value && !error) {
          showSuccess("phone");
        } else {
          clearValidation("phone");
        }
      });

      document
        .getElementById("password")
        .addEventListener("input", function () {
          checkPasswordStrength(this.value);

          const error = validatePassword(this.value);
          if (this.value && error) {
            showError("password", error);
          } else if (this.value && !error) {
            showSuccess("password");
          } else {
            clearValidation("password");
          }

          // Also validate confirm password if it has a value
          const confirmPassword =
            document.getElementById("confirmPassword").value;
          if (confirmPassword) {
            const confirmError = validateConfirmPassword(
              this.value,
              confirmPassword
            );
            if (confirmError) {
              showError("confirmPassword", confirmError);
            } else {
              showSuccess("confirmPassword");
            }
          }
        });

      document
        .getElementById("confirmPassword")
        .addEventListener("input", function () {
          const password = document.getElementById("password").value;
          const error = validateConfirmPassword(password, this.value);
          if (this.value && error) {
            showError("confirmPassword", error);
          } else if (this.value && !error) {
            showSuccess("confirmPassword");
          } else {
            clearValidation("confirmPassword");
          }
        });

      document
        .getElementById("dateOfBirth")
        .addEventListener("change", function () {
          const error = validateDateOfBirth(this.value);
          if (this.value && error) {
            showError("dateOfBirth", error);
          } else if (this.value && !error) {
            showSuccess("dateOfBirth");
          } else {
            clearValidation("dateOfBirth");
          }
        });

      document.querySelectorAll('input[name="gender"]').forEach((radio) => {
        radio.addEventListener("change", function () {
          const error = validateGender();
          if (error) {
            const genderErrorElement = document.getElementById("genderError");
            genderErrorElement.innerHTML = `<i class="fas fa-exclamation-circle"></i> ${error}`;
            genderErrorElement.style.display = "flex";
          } else {
            document.getElementById("genderError").style.display = "none";
          }
        });
      });

      document.getElementById("terms").addEventListener("change", function () {
        const error = validateTerms();
        if (error) {
          showError("terms", error);
        } else {
          document.getElementById("termsError").style.display = "none";
        }
      });

      // Initialize form
      showStep(1);

      // Set max date for date of birth (18 years ago)
      const today = new Date();
      const maxDate = new Date(
        today.getFullYear() - 18,
        today.getMonth(),
        today.getDate()
      );
      document.getElementById("dateOfBirth").max = maxDate
        .toISOString()
        .split("T")[0];
    </script>
  </body>
</html>
